{
  "meta_type" : "schedule_config",
  "objinfo" : { },
  "type" : "Unknown",
  "writable" : false,
  "manage" : false,
  "is_sub" : false,
  "attributes" : { },
  "programs" : [ {
    "name" : "CClearResources",
    "description" : null,
    "mod_type" : "scheduler_quartz",
    "java_source" : [ "String tempfolder = p_daemon.APP_HOME + \"/temp\";", "          ", "File dir = new File(tempfolder);", "", "long tsize = 0L;", "int n = 0;", "", "SimpleDateFormat sdf = new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\");", "Date cdate = new Date();", "long ldate = cdate.getTime();", "", "for (File f : dir.listFiles())", "{", "  if (f.isFile() && f.canRead() && f.canWrite())", "  {", "    String fname = f.getAbsolutePath();", "    long fsize = f.getTotalSpace();", "    String date = sdf.format(f.lastModified());", "    ", "    if (ldate - f.lastModified() > 60 * 6 * 1000L)", "    {", "      try", "      {", "        f.delete();", "        logger.debug(\"oooooo delete \" + fname + \" (\" + fsize + \"), \" + date);", "        tsize += fsize;", "        n++;", "      }", "      catch (Exception e)", "      {", "        logger.debug(\"****** delete failed : \" + fname + \" : \" + e.getMessage());", "      }", "    }", "    else", "    {", "      logger.debug(\"xxxxxx delete failed : \" + fname + \" : last modified \" + date);", "    }", "  }", "}", "", "logger.debug(\"##### total \" + n + \" files deleted (\" + tsize + \" bytes)\");" ],
    "java_import" : [ "import java.util.*;" ],
    "java_extra" : null,
    "ui_layout" : null,
    "ui_script" : null,
    "ui_screen" : [ ],
    "code_parts" : { },
    "params" : null,
    "java_class" : "com.amplix.scheduler.job.CClearResources",
    "intent" : null
  }, {
    "name" : "Corona19DataLoader",
    "description" : null,
    "mod_type" : "external_dataloader",
    "java_source" : [ "logger.debug(\"this is test\");", "", "String dbname = \"Northwind Sample\";", "", "this.executeProcess(con, dbname);", "" ],
    "java_import" : [ "import com.amplix.service.system.HttpBridge;", "import java.io.BufferedReader;", "import java.io.StringReader;", "import com.amplix.utility.DTokenizer;", "import java.util.ArrayList;", "import java.util.List;", "import java.util.Date;", "import java.text.SimpleDateFormat;", "import java.util.Calendar;" ],
    "java_extra" : [ "private final String tbname = \"tb_corana19\";", "", "private void executeProcess(Connection con_meta, String dbname)", "\tthrows Exception", "{", "\tDBConnectionPool dbpool = null;", "\tdbpool = this.getConnectionPool(con_meta, dbname);", "\tConnection con = null;", "\t", "\ttry", "\t{", "\t\tcon = p_daemon.connMgr.getConnection(dbpool, null);", "", "\t\tif (con == null)", "\t\t{", "\t\t\tlogger.error(\"error on database connection\");", "\t\t}", "\t\tcreateOrTruncTable(con, tbname);", "\t\t", "\t\tCalendar cal = Calendar.getInstance();", "\t\tcal.set(2020, 0, 20);", "\t\t", "\t\tCalendar cdate = Calendar.getInstance();", "\t\t", "\t\tSimpleDateFormat dformat = new SimpleDateFormat(\"MM-dd-yyyy\");", "\t\t", "\t\twhile (true)", "\t\t{", "\t\t\tString fname = dformat.format(cal.getTime()) + \".csv\";", "\t\t\tprocessLoadFile(con_meta, con, fname, dbname);", "\t\t\t", "\t\t\tif (cal.getTime().getTime() > cdate.getTime().getTime())", "\t\t\t\tbreak;", "\t\t\t\t", "\t\t\tcal.add(Calendar.DATE, 1);", "\t\t}", "\t}", "\tcatch (Exception ex)", "\t{", "\t\tp_daemon.connMgr.rollbackConnection(null, con);", "\t\tthrow new Exception(\"error while loading data\", ex);", "\t}", "\tfinally", "\t{", "\t\tp_daemon.connMgr.freeConnection(dbpool, con);", "\t}", "}", "", "private void processLoadFile(Connection con_meta, Connection con, String fname, String dbname)", "\tthrows Exception", "{", "\tHttpBridge bridge = new HttpBridge(\"https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_daily_reports/\",  -1, -1, -1);", "\tString tvalue = bridge.sendGet(fname);", "", "\tPreparedStatement pstmt = null;", "\t", "\ttry", "\t{", "\t\tString sql = null;", "\t\t", "\t\tsql = \"INSERT INTO \" + tbname + \"(province_state, country_region, last_update, confirmed, deaths, recovered, latitude, longitude) VALUES (?, ?, ?, ?, ?, ?, ?, ?)\";", "\t\tpstmt = con.prepareStatement(sql);", "\t\t", "\t\tBufferedReader reader = new BufferedReader(new StringReader(tvalue));", "\t\tString line = null;", "\t\tint l = 0;", "\t\t", "\t\tSimpleDateFormat dformat = new SimpleDateFormat(\"MM/dd/yyyy HH:mm\");", "\t\tSimpleDateFormat dformat2 = new SimpleDateFormat(\"yyyy-MM-dd'T'HH:mm:ss\");", "\t\tSimpleDateFormat dformat3 = new SimpleDateFormat(\"M/dd/yy HH:mm\");", "\t\twhile ((line = reader.readLine()) != null)", "\t\t{", "\t\t\tlogger.debug(line);", "\t\t\tif (line.trim().length() == 0)", "\t\t\t\tcontinue;", "\t\t\t\t", "\t\t\tif (l == 0)", "\t\t\t{", "\t\t\t\tl++;", "\t\t\t\tcontinue;", "\t\t\t}", "\t\t\t\t", "\t\t\tString[] mrow = DTokenizer.parseCSV(line, ',');", "\t\t\t", "\t\t\tfor (int i=0; i < 8; i++)", "\t\t\t{", "\t\t\t\tString t = mrow.length > i ? mrow[i] : null;", "\t\t\t\tif (i == 2)", "\t\t\t\t{", "\t\t\t\t\t// 1/22/2020 17:00", "\t\t\t\t\tDate dt = null;", "\t\t\t\t\tif (t.length() == \"yyyy-MM-ddTHH:mm:ss\".length())", "\t\t\t\t\t{", "\t\t\t\t\t\tdt = dformat2.parse(t);", "\t\t\t\t\t}", "\t\t\t\t\telse if (t.length() < 15)", "\t\t\t\t\t{", "\t\t\t\t\t\tdt = dformat3.parse(t);", "\t\t\t\t\t}", "\t\t\t\t\telse", "\t\t\t\t\t{", "\t\t\t\t\t\tdt = dformat.parse(t);", "\t\t\t\t\t}", "\t\t\t\t\tpstmt.setDate(i + 1, new java.sql.Date(dt.getTime()));", "\t\t\t\t}", "\t\t\t\telse if (i > 2 && i < 6)", "\t\t\t\t{", "\t\t\t\t\tif (t != null && t.length() > 0)", "\t\t\t\t\t{", "\t\t\t\t\t\tpstmt.setInt(i + 1, Integer.parseInt(t));", "\t\t\t\t\t}", "\t\t\t\t\telse", "\t\t\t\t\t{", "\t\t\t\t\t\tpstmt.setInt(i + 1, 0);", "\t\t\t\t\t}", "\t\t\t\t}", "\t\t\t\telse if (i > 5)", "\t\t\t\t{", "\t\t\t\t\tpstmt.setString(i + 1, t);", "\t\t\t\t}", "\t\t\t\telse", "\t\t\t\t{", "\t\t\t\t\tpstmt.setString(i + 1, t);", "\t\t\t\t}", "\t\t\t}", "\t\t\t", "\t\t\tpstmt.addBatch();", "\t\t\t", "\t\t\tl++;", "\t\t}", "\t\t", "\t\tpstmt.executeBatch();", "\t\t", "\t\tpstmt.close();", "\t\tpstmt = null;", "\t\t", "\t\treader.close();", "\t\treader = null;", "\t}", "\tcatch (Exception ex)", "\t{", "\t\tif (pstmt != null)", "\t\t\tpstmt.close();", "\t\tpstmt = null;", "\t\t// throw new Exception(\"error while loading data\" + fname, ex);", "\t}", "\tfinally", "\t{", "\t\tif (pstmt != null)", "\t\t\tpstmt.close();", "\t\tpstmt = null;", "\t}", "}", "", "private void createOrTruncTable(Connection con, String tbname)", "\tthrows Exception", "{", "\tPreparedStatement pstmt = null;", "\t", "\tString sql = null;", "\t\t", "\tsql = \"CREATE TABLE \" + tbname + \" (\"", "\t\t+ \" province_state varchar(100),\"", "\t\t+ \" country_region varchar(50),\"", "\t\t+ \" last_update date,\"", "\t\t+ \" confirmed numeric(9),\"", "\t\t+ \" deaths numeric(9),\"", "\t\t+ \" recovered numeric(9),\"", "\t\t+ \" latitude varchar(32),\"", "\t\t+ \" longitude varchar(32)\"", "\t\t+ \")\";", "\t\t", "\ttry", "\t{", "\t\tpstmt = con.prepareStatement(sql);", "\t\tpstmt.execute();", "\t\tpstmt.close();", "\t\tpstmt = null;", "\t}", "\tcatch (Exception e)", "\t{", "\t\tlogger.error(\"error on create table\");", "\t}", "\t", "\tsql = \"TRUNCATE TABLE \" + tbname;", "\tpstmt = con.prepareStatement(sql);", "\tpstmt.execute();", "\t", "\tif (pstmt != null)", "\t\tpstmt.close();", "\tpstmt = null;", "}" ],
    "ui_layout" : null,
    "ui_script" : null,
    "ui_screen" : [ ],
    "code_parts" : { },
    "params" : null,
    "java_class" : "com.amplix.scheduler.job.Corona19DataLoaderr",
    "intent" : null
  }, {
    "name" : "ExampleSSO",
    "description" : null,
    "mod_type" : "single_sign_on",
    "java_source" : [ ],
    "java_import" : [ ],
    "java_extra" : [ ],
    "ui_layout" : [ ],
    "ui_script" : [ ],
    "ui_screen" : [ ],
    "code_parts" : {
      "code_before_login" : [ "if (userid != null && userid.startsWith(\"sso_sim_b6118e61573e4aaa_key_map:\") == true)\r", "{\r", "\tthis.setSecProp(iprop);\r", "\t\r", "\tObject _osess = session.getAttribute(\"__sso_info\");\r", "\t\r", "\tString mts = \"\";\r", "\r", "\tif (_osess != null)\r", "\t{\r", "\t\tString t = _osess.toString();\r", "\t\tlogger.info(t);\r", "\t\tString muserid = t.substring(t.indexOf(\":\") + 1);\r", "\r", "\t\tlogger.info(\">> login with ID : \" + muserid);\r", "\t\t\r", "\t\tuid = getRegisteredUserUUID(mts, muserid);\r", "\t}\r", "}" ]
    },
    "params" : null,
    "java_class" : "com.amplix.sso.custom.ExampleSSO",
    "intent" : null
  }, {
    "name" : "ReportCacheLoader",
    "description" : null,
    "mod_type" : "scheduler_quartz",
    "java_source" : [ "logger.debug(\"report cache loader starting\");", "", "List<Map<String, String>> reports = this.getReports(\"/TestCases/3.Filtering\");", "", "if (reports.size() > 0)", "{", "    for (int i=0; i < reports.size(); i++)", "    {", "        Map<String, String> report = reports.get(i);", "        logger.debug(report.get(\"name\"));", "        String ret = runReport(report.get(\"uid\"), null);", "        logger.debug(ret);", "    }", "}" ],
    "java_import" : [ "import java.util.*;", "import com.amplix.utility.HttpBridge;" ],
    "java_extra" : null,
    "ui_layout" : [ ],
    "ui_script" : [ ],
    "ui_screen" : [ ],
    "code_parts" : { },
    "params" : null,
    "java_class" : "com.amplix.scheduler.job.ReportCacheLoader",
    "intent" : null
  }, {
    "name" : "PublicDataLoader",
    "description" : null,
    "mod_type" : "scheduler_quartz",
    "java_source" : [ "", "// getting parameters", "logger.info(\"----- getting parameters\");", "    String t_sheet = getParam(\"t_sheet\").toString();", "    String t_tablename = getParam(\"t_tablename\").toString();", "    String t_resource = getParam(\"t_resource\").toString();", "    boolean t_drop_create = getParam(\"t_drop_create\") != null ? getParam(\"t_drop_create\").equals(\"T\") : false;", "    boolean t_truncate = getParam(\"t_truncate\") != null ? getParam(\"t_truncate\").equals(\"T\") : false;", "    boolean t_create_not_exist = getParam(\"t_create_not_exist\") != null ? getParam(\"t_create_not_exist\").equals(\"T\") : false;", "    ", "    String url = getParam(\"t_url\").toString();", "    ", "// getting column information", "logger.info(\"----- getting column headers\");", "    this.setReportResult(t_resource);", "", "// loading data", "logger.info(\"----- loading data\");", "    String endpoint = url.substring(0, url.indexOf(\"/\", \"https://\".length() + 1));", "\tString address = url.substring(endpoint.length());", "    ", "    HttpBridge bridge = new HttpBridge(p_daemon, endpoint, -1, -1, -1);", "\tString fileid = bridge.sendGetFile(address);", "\t", "\tlogger.debug(fileid);", "\t", "\tThread.sleep(100);", "\t", "\tString filename = fileid.substring(fileid.indexOf(\";\") + 1);", "\tfileid = fileid.substring(0, fileid.indexOf(\";\"));", "\t", "\tlogger.info(\"loading >> \" + filename);", "\t", "\tString ext = \"CSV\";", "\t", "\tif (filename.indexOf(\".\") > -1)", "\t{", "\t\text = filename.substring(filename.lastIndexOf(\".\") + 1).toUpperCase();", "\t}", "\t", "\tthis.readExcelSheet(fileid, ext, t_sheet, 0L);", "", "// connecting database", "logger.info(\"----- connecting database\");", "Connection conn = getConnection(p_connection, \"sample demo\");", "", "String sql = null;", "ResultSet rs = null;", "", "// creating table if not exist", "logger.info(\"----- creating table if not exist\");", "    boolean table_exist = this.hasTable(conn, t_tablename);", "    ", "    // drop table if needed", "    if (table_exist == true && t_drop_create == true)", "    {", "        this.dropTable(conn, t_tablename);", "        table_exist = false;", "    }", "    ", "    if (table_exist == true && t_truncate == true)", "    {", "        // truncate table if necessary", "        this.truncateTable(conn, t_tablename);", "    }", "    ", "    if (table_exist == false && t_create_not_exist == true)", "    {", "        this.createTable(conn, t_tablename);", "    }", "    ", "// insert data from row", "    this.insertData(conn, t_tablename, t_sheet, true);", "", "// release database", "logger.info(\"----- releasing database connection\");", "if (rs != null)", "    rs.close();", "rs = null;", "", "if (pstmt != null)", "    pstmt.close();", "pstmt = null;", "", "if (conn != null)", "    conn.close();", "conn = null;" ],
    "java_import" : [ "import com.amplix.utility.HttpBridge;", "import java.io.BufferedReader;", "import java.io.StringReader;", "import java.util.*;", "import java.io.File;", "import java.text.SimpleDateFormat;", "import java.sql.*;", "", "import com.fasterxml.jackson.databind.ObjectMapper;", "import com.fasterxml.jackson.databind.JsonNode;" ],
    "java_extra" : [ "public Map<String, Object> getSampleData(String url)", "    throws Exception", "{", "    ", "    ", "    logger.info(\"get sample data : \" + url);", "    ", "    String endpoint = url.substring(0, url.indexOf(\"/\", \"https://\".length() + 1));", "\tString address = url.substring(endpoint.length());", "    ", "    HttpBridge bridge = new HttpBridge(p_daemon, endpoint, -1, -1, -1);", "\tString fileid = bridge.sendGetFile(address);", "\t", "\tlogger.debug(fileid);", "\t", "\tThread.sleep(100);", "\t", "\tString filename = fileid.substring(fileid.indexOf(\";\") + 1);", "\tfileid = fileid.substring(0, fileid.indexOf(\";\"));", "\t", "\tlogger.info(\"loading >> \" + filename);", "\t", "\tString ext = \"CSV\";", "\t", "\tif (filename.indexOf(\".\") > -1)", "\t{", "\t\text = filename.substring(filename.lastIndexOf(\".\") + 1).toUpperCase();", "\t}", "\t", "\tMap<String, Object> datas = this.readExcelSheet(fileid, ext, null, 100L);", "\tdatas.put(\"filename\", filename);", "\tdatas.put(\"fileext\", ext);", "", "    return datas;", "}" ],
    "ui_layout" : [ "{", "    \"xtype\": \"fieldset\",", "    \"title\": \"Public Data Loader Options\",", "    \"layout\": {", "        \"type\": \"vbox\",", "        \"align\": \"stretch\"", "    },", "    \"items\": [", "        {", "            \"xtype\": \"container\",", "            \"layout\": {", "                \"type\": \"hbox\",", "                \"align\": \"stretch\"", "            },", "            \"items\": [", "                {", "                    \"xtype\": \"textarea\",", "                    \"height\": 40,", "                    \"fieldLabel\": \"URL\",", "                    \"name\": \"t_url\",", "                    \"required\": true", "                },", "                {", "                    \"xtype\": \"button\",", "                    \"text\": \"Get Sample\",", "                    \"handler\": \"get_sample\"", "                }", "            ]", "        },", "        {", "            \"xtype\": \"checkbox\",", "            \"name\": \"t_drop_create\",", "            \"fieldLabel\": \"Drop and Create\",", "            \"boxLabel\": \"Enabled\"", "        },", "        {", "            \"xtype\": \"checkbox\",", "            \"name\": \"t_truncate\",", "            \"fieldLabel\": \"Truncate Table\",", "            \"boxLabel\": \"Enabled\"", "        },", "        {", "            \"xtype\": \"checkbox\",", "            \"name\": \"t_create_not_exist\",", "            \"fieldLabel\": \"Create if not exists\",", "            \"boxLabel\": \"Enabled\"", "        },", "        {", "            \"xtype\": \"textfield\",", "            \"fieldLabel\": \"Table Name\",", "            \"name\": \"t_tablename\",", "            \"required\": true", "        },", "        {", "            \"xtype\": \"textfield\",", "            \"readOnly\": true,", "            \"fieldLabel\": \"Sheet\",", "            \"name\": \"t_sheet\",", "            \"required\": true", "        },", "        {", "            \"xtype\": \"textfield\",", "            \"name\": \"t_fileid\",", "            \"hidden\": true,", "            \"fieldLabel\": \"File ID\",", "            \"reqdOnly\": true,", "            \"required\": true", "        },", "        {", "            \"xtype\": \"textfield\",", "            \"name\": \"t_filename\",", "            \"fieldLabel\": \"File Name\",", "            \"readOnly\": true,", "            \"required\": true", "        },", "        {", "            \"xtype\": \"textarea\",", "            \"fieldLabel\": \"Resource\",", "            \"name\": \"t_resource\",", "            \"popup_editor\": true,", "            \"required\": true", "        }", "    ]", "}" ],
    "ui_script" : [ "{", "    get_sample: function() {", "        console.log(\"ui script\");", "        ", "        var me = this,", "            pobj = me.down(\"[name=_params]\"),", "            t_url = pobj.down(\"[name=t_url]\"),", "            params = {};", "        ", "        t_url.clearInvalid();", "        ", "        if (!t_url.getValue())", "        {", "            t_url.markInvalid();", "            return;", "        }", "        ", "        params[\"t_url\"] = t_url.getValue();", "        ", "        var dlg = new IG$._pdloader_sample({", "            params: params,", "            callback: new IG$.callBackObj(me, function(result, sheet) {", "                me.down(\"[name=t_sheet]\").setValue(\"\");", "                me.down(\"[name=t_filename]\").setValue(result.filename);", "                me.down(\"[name=t_fileid]\").setValue(result.fileuid);", "                ", "                var seq = -1,", "                    i;", "                ", "                for (i=0; i < result.sheetnames.length; i++)", "                {", "                    if (result.sheetnames[i] == sheet)", "                    {", "                        seq = i;", "                        break;", "                    }", "                }", "                ", "                if (seq > -1)", "                {", "                    me.down(\"[name=t_sheet]\").setValue(sheet);", "                    var res = result.sheetdata[seq];", "                    delete res[\"inline_data\"];", "                    me.down(\"[name=t_resource]\").setValue(JSON.stringify(res));", "                }", "            })", "        });", "        dlg.show();", "    }", "}" ],
    "ui_screen" : [ "IG$._pdloader_sample = $s.extend($s.window, {", "\t", "\tmodal: false,", "\tregion:'center',", "\tlayout: \"fit\",", "\tclosable: false,", "\tresizable:false,", "\twidth: 800,", "\theight: 600,", "\t", "\tinit_f: function() {", "\t\tvar me = this,", "\t\t\treq = new IG$._rpc$(),", "\t\t\tparams = me.params,", "\t\t\tp = [];", "\t\t\t", "\t\tp.push(params.t_url);", "\t\t\t", "\t\treq.init(me, ", "\t\t\t{", "\t\t\t\tack: \"plugin\",", "\t\t\t\tpayload: {option: \"plugin_exec\"},", "\t\t\t\tmbody: {", "\t\t\t\t    module: \"com.amplix.scheduler.job.PublicDataLoader\", ", "\t\t\t\t    method: \"getSampleData\", ", "\t\t\t\t    params: p.join(\";\")", "\t\t\t\t}", "\t\t\t}, me, function(jdoc) {", "\t\t\t\tvar me = this,", "\t\t\t\t    t_sheet = me.down(\"[name=t_sheet]\"),", "\t\t\t\t    sheets = [];", "\t\t\t\t    ", "\t\t\t\t$.each(jdoc.sheetnames, function(i, val) {", "\t\t\t\t    sheets.push({", "\t\t\t\t        name: val,", "\t\t\t\t        value: val", "\t\t\t\t    });", "\t\t\t\t});", "                ", "                me._loaded_data = jdoc;", "\t\t\t\tt_sheet.store.loadData(sheets);", "\t\t\t\t", "\t\t\t\tif (sheets.length)", "\t\t\t    {", "\t\t\t        t_sheet.setValue(sheets[0].value);", "\t\t\t    }", "\t\t\t}, null);", "\t\treq.send();", "\t},", "\t", "\tconfirm_f: function() {", "\t    var me = this,", "\t        t_sheet = me.down(\"[name=t_sheet]\");", "\t        ", "\t    t_sheet.clearInvalid();", "\t    ", "\t    if (!t_sheet.getValue())", "\t    {", "\t        t_sheet.markInvalid();", "\t        return;", "\t    }", "\t    ", "\t    me.callback && me.callback.execute(me._loaded_data, t_sheet.getValue());", "\t    me.close();", "\t},", "\t", "\t_update_sheet: function(value) {", "\t    var me = this,", "\t        _loaded_data = me._loaded_data,", "\t        t_columns = me.down(\"[name=t_columns]\"),", "\t        t_data = me.down(\"[name=t_data]\"),", "\t        seq = -1,", "\t        i;", "\t        ", "\t    for (i=0; i < _loaded_data.sheetnames.length; i++)", "\t    {", "\t        if (_loaded_data.sheetnames[i] == value)", "\t        {", "\t            seq = i;", "\t            break;", "\t        }", "\t    }", "\t    ", "\t    if (seq > -1)", "\t    {", "\t        var dt = _loaded_data.sheetdata[seq];", "\t        t_columns.store.loadData(dt.headers);", "\t        ", "\t        var cols = [];", "\t        ", "\t        $.each(dt.headers, function(i, header) {", "\t            var col = {", "\t                xtype: \"gridcolumn\",", "\t\t\t\t\twidth: 150,", "\t                text: header.fieldname,", "\t                dataIndex: \"col\" + i", "\t            };", "\t            cols.push(col);", "\t        });", "\t        ", "\t        var data = [];", "\t        ", "\t        $.each(dt.inline_data, function(i, row) {", "\t            var r = {};", "\t            ", "\t            $.each(row, function(j, t) {", "\t                r[\"col\" + j] = t;", "\t            });", "\t            ", "\t            data.push(r);", "\t        });", "\t        ", "\t        var store = {", "    \t\t\tstore: \"array\",", "    \t\t\tdata: data", "    \t\t};", "    \t\t", "    \t\tt_data.reconfigure(store, cols);", "\t    }", "\t},", "\t", "\tinitComponent : function() {", "\t\tvar me = this;", "\t\t", "\t\tconsole.log(\"data loader screen\");", "\t\t", "\t\t$s.apply(this, {", "\t\t    title: \"Data Sample\",", "\t\t    ", "\t\t\tdefaults: {", "\t\t\t\tpadding: 10", "\t\t\t},", "\t\t\t", "\t\t\titems: [", "\t\t\t\t{", "\t\t\t\t\txtype: \"panel\",", "\t\t\t\t\tlayout: {", "\t\t\t\t\t\ttype: \"vbox\",", "\t\t\t\t\t\talign: \"stretch\"", "\t\t\t\t\t},", "\t\t\t\t\tpadding: 10,", "\t\t\t\t\tdefaults: {", "\t\t\t\t\t\tanchor: \"100%\"", "\t\t\t\t\t},", "\t\t\t\t\titems: [", "\t\t\t\t\t\t{", "\t\t\t\t\t\t\txtype: \"fieldset\",", "\t\t\t\t\t\t\tlayout: {", "\t\t\t\t\t\t\t\ttype: \"vbox\",", "\t\t\t\t\t\t\t\talign: \"stretch\"", "\t\t\t\t\t\t\t},", "\t\t\t\t\t\t\tflex: 1,", "\t\t\t\t\t\t\ttitle: \"Loaded Data\",", "\t\t\t\t\t\t\titems: [", "\t\t\t\t\t\t\t    {", "                                    xtype: \"combobox\",", "                                    fieldLabel: \"Sheets\",", "                                    queryMode: \"local\",", "                        \t\t    displayField: \"name\",", "                        \t\t\tvalueField: \"value\",", "                        \t\t\teditable: false,", "                        \t\t\tautoSelect: true,", "                        \t\t\tstore: {},", "                        \t\t\tname: \"t_sheet\",", "                        \t\t\trequired: true,", "                        \t\t\tlisteners: {", "                        \t\t\t    change: function(tobj, nv, ov) {", "                        \t\t\t        this._update_sheet(nv);", "                        \t\t\t    },", "                        \t\t\t    scope: this", "                        \t\t\t}", "                                },", "                                ", "\t\t\t\t\t\t\t\t{", "\t\t\t\t\t\t\t\t    xtype: \"gridpanel\",", "\t\t\t\t\t\t\t\t    name: \"t_columns\",", "\t\t\t\t\t\t\t\t    title: \"Columns\",", "\t\t\t\t\t\t\t\t    flex: 1,", "\t\t\t\t\t\t\t\t    store: {},", "\t\t\t\t\t\t\t\t    plugins: [", "        \t\t\t\t\t\t\t\t{", "        \t\t\t\t\t\t\t\t\tptype: \"cellediting\",", "        \t\t\t\t\t\t\t\t\tclicksToEdit: 1", "        \t\t\t\t\t\t\t\t}", "        \t\t\t\t\t\t\t],", "\t\t\t\t\t\t\t\t    columns: [", "\t\t\t\t\t\t\t\t        {", "\t\t\t\t\t\t\t\t            text: \"Fieldname\",", "\t\t\t\t\t\t\t\t            dataIndex: \"fieldname\",", "\t\t\t\t\t\t\t\t            editor: {", "        \t\t\t\t\t\t\t\t\t\txtype: \"textfield\",", "        \t\t\t\t\t\t\t\t\t\tallowBlank: false", "        \t\t\t\t\t\t\t\t\t}", "\t\t\t\t\t\t\t\t        },", "\t\t\t\t\t\t\t\t        {", "\t\t\t\t\t\t\t\t            text: \"DataType\",", "\t\t\t\t\t\t\t\t            dataIndex: \"datatype\",", "\t\t\t\t\t\t\t\t            editor: {", "        \t\t\t\t\t\t\t\t\t\txtype: \"textfield\",", "        \t\t\t\t\t\t\t\t\t\tallowBlank: false", "        \t\t\t\t\t\t\t\t\t}", "\t\t\t\t\t\t\t\t        },", "\t\t\t\t\t\t\t\t        {", "\t\t\t\t\t\t\t\t            text: \"DataSize\",", "\t\t\t\t\t\t\t\t            dataIndex: \"datasize\",", "\t\t\t\t\t\t\t\t            editor: {", "        \t\t\t\t\t\t\t\t\t\txtype: \"textfield\",", "        \t\t\t\t\t\t\t\t\t\tallowBlank: false", "        \t\t\t\t\t\t\t\t\t}", "\t\t\t\t\t\t\t\t        },", "\t\t\t\t\t\t\t\t        {", "\t\t\t\t\t\t\t\t            text: \"Decimal\",", "\t\t\t\t\t\t\t\t            dataIndex: \"decimaldigits\",", "\t\t\t\t\t\t\t\t            editor: {", "        \t\t\t\t\t\t\t\t\t\txtype: \"textfield\",", "        \t\t\t\t\t\t\t\t\t\tallowBlank: false", "        \t\t\t\t\t\t\t\t\t}", "\t\t\t\t\t\t\t\t        }", "\t\t\t\t\t\t\t\t    ]", "\t\t\t\t\t\t\t\t},", "\t\t\t\t\t\t\t\t{", "                                    xtype: \"container\",", "                                    height: 5", "                                },", "\t\t\t\t\t\t\t\t{", "\t\t\t\t\t\t\t\t    xtype: \"gridpanel\",", "\t\t\t\t\t\t\t\t    name: \"t_data\",", "\t\t\t\t\t\t\t\t    title: \"Sample Data\",", "\t\t\t\t\t\t\t\t    flex: 1,", "\t\t\t\t\t\t\t\t    columns: []", "\t\t\t\t\t\t\t\t}", "\t\t\t\t\t\t\t]", "\t\t\t\t\t\t}", "\t\t\t\t\t]", "\t\t\t\t}", "\t\t\t],", "\t\t\tbuttons:[", "\t\t\t\t\"->\",", "\t\t\t\t{", "\t\t\t\t    text: IRm$.r1(\"B_CONFIRM\"),", "\t\t\t\t    handler: function() {", "\t\t\t\t        this.confirm_f();", "\t\t\t\t    },", "\t\t\t\t    scope: this", "\t\t\t\t},", "\t\t\t\t{", "\t\t\t\t\ttext: IRm$.r1('B_CLOSE'),", "\t\t\t\t\thandler:function() {", "\t\t\t\t\t\tthis.close();", "\t\t\t\t\t},", "\t\t\t\t\tscope: this", "\t\t\t\t}", "\t\t\t],", "\t\t\tlisteners: {", "\t\t\t\tafterrender: function(ui) {", "\t\t\t\t\tthis.init_f();", "\t\t\t\t}", "\t\t\t}", "\t\t});", "\t\t", "\t\tIG$._pdloader_sample.superclass.initComponent.apply(this, arguments);", "\t}", "});" ],
    "code_parts" : { },
    "params" : null,
    "java_class" : "com.amplix.scheduler.job.PublicDataLoader",
    "intent" : null
  }, {
    "name" : "File Data Loader",
    "description" : null,
    "mod_type" : "scheduler_quartz",
    "java_source" : [ "", "// getting parameters", "logger.info(\"----- getting parameters\");", "    String t_sheet = getParam(\"t_sheet\").toString();", "    String t_tablename = getParam(\"t_tablename\").toString();", "    String t_resource = getParam(\"t_resource\").toString();", "    boolean t_drop_create = getParam(\"t_drop_create\") != null ? getParam(\"t_drop_create\").equals(\"T\") : false;", "    boolean t_truncate = getParam(\"t_truncate\") != null ? getParam(\"t_truncate\").equals(\"T\") : false;", "    boolean t_create_not_exist = getParam(\"t_create_not_exist\") != null ? getParam(\"t_create_not_exist\").equals(\"T\") : false;", "    ", "    String fileid = getParam(\"t_fileuid\").toString();", "    String filename = getParam(\"t_filename\").toString();", "    ", "// getting column information", "logger.info(\"----- getting column headers\");", "    this.setReportResult(t_resource);", "", "// loading data", "logger.info(\"----- loading data\");", "\tlogger.info(\"loading >> \" + filename);", "\t", "\tString ext = \"CSV\";", "\t", "\tif (filename.indexOf(\".\") > -1)", "\t{", "\t\text = filename.substring(filename.lastIndexOf(\".\") + 1).toUpperCase();", "\t}", "\t", "\tthis.readExcelSheet(fileid, ext, t_sheet, 0L);", "", "// connecting database", "logger.info(\"----- connecting database\");", "Connection conn = getConnection(p_connection, \"sample demo\");", "", "String sql = null;", "", "// creating table if not exist", "logger.info(\"----- creating table if not exist\");", "    boolean table_exist = this.hasTable(conn, t_tablename);", "    ", "    // drop table if needed", "    if (table_exist == true && t_drop_create == true)", "    {", "        this.dropTable(conn, t_tablename);", "        table_exist = false;", "    }", "    ", "    if (table_exist == true && t_truncate == true)", "    {", "        // truncate table if necessary", "        this.truncateTable(conn, t_tablename);", "    }", "    ", "    if (table_exist == false && t_create_not_exist == true)", "    {", "        this.createTable(conn, t_tablename);", "    }", "    ", "// insert data from row", "    this.insertData(conn, t_tablename, t_sheet, true);", "", "// release database", "logger.info(\"----- releasing database connection\");", "", "if (conn != null)", "    conn.close();", "conn = null;" ],
    "java_import" : [ "import com.amplix.utility.HttpBridge;", "import java.io.BufferedReader;", "import java.io.StringReader;", "import java.util.*;", "import java.io.File;", "import java.text.SimpleDateFormat;", "import java.sql.*;", "", "import com.fasterxml.jackson.databind.ObjectMapper;", "import com.fasterxml.jackson.databind.JsonNode;" ],
    "java_extra" : [ "public Map<String, Object> getSampleData(String fileuid, String filename)", "    throws Exception", "{", "    logger.info(\"get sample data : \" + fileuid);", "\tlogger.info(\"loading >> \" + filename);", "\t", "\tString ext = \"CSV\";", "\t", "\tif (filename.indexOf(\".\") > -1)", "\t{", "\t\text = filename.substring(filename.lastIndexOf(\".\") + 1).toUpperCase();", "\t}", "\t", "\tMap<String, Object> datas = this.readExcelSheet(fileuid, ext, null, 100L);", "\tdatas.put(\"filename\", filename);", "\tdatas.put(\"fileext\", ext);", "", "    return datas;", "}" ],
    "ui_layout" : [ "{", "    \"xtype\": \"fieldset\",", "    \"title\": \"Public Data Loader Options\",", "    \"layout\": {", "        \"type\": \"vbox\",", "        \"align\": \"stretch\"", "    },", "    \"items\": [", "        {", "            \"xtype\": \"form\",", "            \"name\": \"fileform\",", "            \"layout\": {", "                \"type\": \"hbox\",", "                \"align\": \"stretch\"", "            },", "            \"items\": [", "                {", "                    \"xtype\": \"hiddenfield\",", "\t\t\t\t\t\"name\": \"_mts_\"", "                },", "                {", "\t\t\t\t\t\"xtype\": \"textfield\",", "\t\t\t\t\t\"name\": \"orig_filename\",", "\t\t\t\t\t\"hidden\": true,", "\t\t\t\t\t\"fieldLabel\": \"File Name\"", "\t\t\t\t},", "\t\t\t\t{", "\t\t\t\t\t\"xtype\": \"fileuploadfield\",", "\t\t\t\t\t\"name\": \"photo\",", "\t\t\t\t\t\"flex\": 1,", "\t\t\t\t\t\"fieldLabel\": \"File\",", "\t\t\t\t\t\"msgTarget\": \"side\",", "\t\t\t\t\t\"anchor\": \"100%\",", "\t\t\t\t\t\"buttonText\": \"Select File\",", "\t\t\t\t\t\"buttonConfig\": {", "\t\t\t\t\t\t\"margin\": \"0 2 0\"", "\t\t\t\t\t}", "\t\t\t\t},", "\t\t\t\t{", "\t\t\t\t    \"xtype\": \"button\",", "\t\t\t\t    \"text\": \"Upload\",", "\t\t\t\t    \"handler\": \"upload_file\"", "\t\t\t\t}", "            ]", "        },", "        {", "            \"xtype\": \"checkbox\",", "            \"name\": \"t_drop_create\",", "            \"fieldLabel\": \"Drop and Create\",", "            \"boxLabel\": \"Enabled\"", "        },", "        {", "            \"xtype\": \"checkbox\",", "            \"name\": \"t_truncate\",", "            \"fieldLabel\": \"Truncate Table\",", "            \"boxLabel\": \"Enabled\"", "        },", "        {", "            \"xtype\": \"checkbox\",", "            \"name\": \"t_create_not_exist\",", "            \"fieldLabel\": \"Create if not exists\",", "            \"boxLabel\": \"Enabled\"", "        },", "        {", "            \"xtype\": \"textfield\",", "            \"fieldLabel\": \"Table Name\",", "            \"name\": \"t_tablename\",", "            \"required\": true", "        },", "        {", "            \"xtype\": \"textfield\",", "            \"readOnly\": true,", "            \"fieldLabel\": \"Sheet\",", "            \"name\": \"t_sheet\",", "            \"required\": true", "        },", "        {", "            \"xtype\": \"textfield\",", "            \"name\": \"t_fileuid\",", "            \"fieldLabel\": \"File ID\",", "            \"hidden\": true,", "            \"readOnly\": true,", "            \"required\": true", "        },", "        {", "            \"xtype\": \"textfield\",", "            \"name\": \"t_filename\",", "            \"fieldLabel\": \"File Name\",", "            \"readOnly\": true,", "            \"required\": true", "        },", "        {", "            \"xtype\": \"textarea\",", "            \"fieldLabel\": \"Resource\",", "            \"name\": \"t_resource\",", "            \"popup_editor\": true,", "            \"required\": true", "        }", "    ],", "    \"listeners\": {", "        \"afterrender\": \"init_fileupload_form\"", "    }", "}" ],
    "ui_script" : [ "{", "    init_fileupload_form: function(panel) {", "        console.log(\"file data loader initialization\");", "        var fileform = panel.down('[name=fileform]');", "\t\tfileform.getForm().errorReader = new IG$.m2ER();", "\t\tfileform.down(\"[name=_mts_]\").setValue(IG$._g$a);", "    },", "    upload_file: function() {", "        console.log(\"file data loader upload file to server\");", "        var me = this,", "\t\t\torig_filename = me.down(\"[name=orig_filename]\"),", "\t\t\tphoto = me.down(\"[name=photo]\"),", "            fileform = me.down(\"[name=fileform]\");", "            ", "        if (me.__cprog)", "\t\t{", "\t\t\tIG$.alertmsg(ig$.appname, IRm$.r1(\"M_PROC_WAIT\"), null, null, 0, \"warning\");", "\t\t\treturn;", "\t\t}", "\t\t", "\t\tfunction show_file_dialog(params) {", "\t\t    // get the file id", "\t\t\tvar dlg = new IG$._pdloader_sample_file({", "                params: params,", "                callback: new IG$.callBackObj(me, function(result, sheet) {", "                    me.down(\"[name=t_sheet]\").setValue(\"\");", "                    me.down(\"[name=t_filename]\").setValue(result.filename);", "                    ", "                    var seq = -1,", "                        i;", "                    ", "                    for (i=0; i < result.sheetnames.length; i++)", "                    {", "                        if (result.sheetnames[i] == sheet)", "                        {", "                            seq = i;", "                            break;", "                        }", "                    }", "                    ", "                    if (seq > -1)", "                    {", "                        me.down(\"[name=t_sheet]\").setValue(sheet);", "                        var res = result.sheetdata[seq];", "                        delete res[\"inline_data\"];", "                        me.down(\"[name=t_resource]\").setValue(JSON.stringify(res));", "                    }", "                })", "            });", "            dlg.show();", "\t\t}", "        ", "        if (me.down(\"[name=t_fileuid]\").getValue())", "        {", "            show_file_dialog({", "                t_fileuid: me.down(\"[name=t_fileuid]\").getValue(),", "                t_filename: me.down(\"[name=t_filename]\").getValue()", "            });", "        }", "        else if (fileform.getForm().isValid()) ", "        {", "            me.__cprog = 1;", "            ", "            var f = fileform.getForm();", "            ", "            document.charset = \"UTF-8\";", "\t\t\tvar fname = photo.getRawValue();", "\t\t\tif (fname.indexOf(\"\\\\\") > -1)", "\t\t\t{", "\t\t\t\tfname = fname.substring(fname.lastIndexOf(\"\\\\\")+1);", "\t\t\t}", "\t\t\t", "\t\t\torig_filename.setValue(fname);", "\t\t\tme.setLoading(true);", "\t\t\tfileform.submit({", "\t\t\t\turl: ig$.servlet,", "\t\t\t\twaitMsg: 'Uploading your data file',", "\t\t\t\tsuccess: function(fp, o) {", "\t\t\t\t\tvar node = fp.errorReader.jsonData,", "\t\t\t\t\t\tuid = node && node.result ? node.result.uid : null,", "\t\t\t\t\t\tparams = {};", "\t\t\t\t\t\t", "\t\t\t\t\tme.setLoading(false);", "\t\t\t\t\t\t", "\t\t\t\t\tparams.t_fileuid = uid;", "\t\t\t\t\tparams.t_filename = photo.getValue();", "\t\t\t\t\tme.down(\"[name=t_fileuid]\").setValue(uid);", "\t\t\t\t\tme.down(\"[name=t_filename]\").setValue(params.t_filename);", "\t\t\t\t\t", "\t\t\t\t\tshow_file_dialog(params);", "\t\t\t\t\tme.__cprog = 0;", "\t\t\t\t}", "\t\t\t});", "        }", "    }", "}" ],
    "ui_screen" : [ "IG$._pdloader_sample_file = $s.extend($s.window, {", "\t", "\tmodal: false,", "\tregion:'center',", "\tlayout: \"fit\",", "\tclosable: false,", "\tresizable:false,", "\twidth: 800,", "\theight: 600,", "\t", "\tinit_f: function() {", "\t\tvar me = this,", "\t\t\treq = new IG$._rpc$(),", "\t\t\tparams = me.params,", "\t\t\tp = [];", "\t\t\t", "\t\tp.push(params.t_fileuid);", "\t\tp.push(params.t_filename);", "\t\t\t", "\t\treq.init(me, ", "\t\t\t{", "\t\t\t\tack: \"plugin\",", "\t\t\t\tpayload: {option: \"plugin_exec\"},", "\t\t\t\tmbody: {", "\t\t\t\t    module: \"com.amplix.scheduler.job.FileDataLoader\", ", "\t\t\t\t    method: \"getSampleData\", ", "\t\t\t\t    params: p.join(\";\")", "\t\t\t\t}", "\t\t\t}, me, function(jdoc) {", "\t\t\t\tvar me = this,", "\t\t\t\t    t_sheet = me.down(\"[name=t_sheet]\"),", "\t\t\t\t    sheets = [];", "\t\t\t\t    ", "\t\t\t\t$.each(jdoc.sheetnames, function(i, val) {", "\t\t\t\t    sheets.push({", "\t\t\t\t        name: val,", "\t\t\t\t        value: val", "\t\t\t\t    });", "\t\t\t\t});", "                ", "                me._loaded_data = jdoc;", "\t\t\t\tt_sheet.store.loadData(sheets);", "\t\t\t\t", "\t\t\t\tif (sheets.length)", "\t\t\t    {", "\t\t\t        t_sheet.setValue(sheets[0].value);", "\t\t\t    }", "\t\t\t}, null);", "\t\treq.send();", "\t},", "\t", "\tconfirm_f: function() {", "\t    var me = this,", "\t        t_sheet = me.down(\"[name=t_sheet]\");", "\t        ", "\t    t_sheet.clearInvalid();", "\t    ", "\t    if (!t_sheet.getValue())", "\t    {", "\t        t_sheet.markInvalid();", "\t        return;", "\t    }", "\t    ", "\t    me.callback && me.callback.execute(me._loaded_data, t_sheet.getValue());", "\t    me.close();", "\t},", "\t", "\t_update_sheet: function(value) {", "\t    var me = this,", "\t        _loaded_data = me._loaded_data,", "\t        t_columns = me.down(\"[name=t_columns]\"),", "\t        t_data = me.down(\"[name=t_data]\"),", "\t        seq = -1,", "\t        i;", "\t        ", "\t    for (i=0; i < _loaded_data.sheetnames.length; i++)", "\t    {", "\t        if (_loaded_data.sheetnames[i] == value)", "\t        {", "\t            seq = i;", "\t            break;", "\t        }", "\t    }", "\t    ", "\t    if (seq > -1)", "\t    {", "\t        var dt = _loaded_data.sheetdata[seq];", "\t        t_columns.store.loadData(dt.headers);", "\t        ", "\t        var cols = [];", "\t        ", "\t        $.each(dt.headers, function(i, header) {", "\t            var col = {", "\t                xtype: \"gridcolumn\",", "\t\t\t\t\twidth: 150,", "\t                text: header.fieldname,", "\t                dataIndex: \"col\" + i", "\t            };", "\t            cols.push(col);", "\t        });", "\t        ", "\t        var data = [];", "\t        ", "\t        $.each(dt.inline_data, function(i, row) {", "\t            var r = {};", "\t            ", "\t            $.each(row, function(j, t) {", "\t                r[\"col\" + j] = t;", "\t            });", "\t            ", "\t            data.push(r);", "\t        });", "\t        ", "\t        var store = {", "    \t\t\tstore: \"array\",", "    \t\t\tdata: data", "    \t\t};", "    \t\t", "    \t\tt_data.reconfigure(store, cols);", "\t    }", "\t},", "\t", "\tinitComponent : function() {", "\t\tvar me = this;", "\t\t", "\t\tconsole.log(\"data loader screen\");", "\t\t", "\t\t$s.apply(this, {", "\t\t    title: \"Data Sample\",", "\t\t    ", "\t\t\tdefaults: {", "\t\t\t\tpadding: 10", "\t\t\t},", "\t\t\t", "\t\t\titems: [", "\t\t\t\t{", "\t\t\t\t\txtype: \"panel\",", "\t\t\t\t\tlayout: {", "\t\t\t\t\t\ttype: \"vbox\",", "\t\t\t\t\t\talign: \"stretch\"", "\t\t\t\t\t},", "\t\t\t\t\tpadding: 10,", "\t\t\t\t\tdefaults: {", "\t\t\t\t\t\tanchor: \"100%\"", "\t\t\t\t\t},", "\t\t\t\t\titems: [", "\t\t\t\t\t\t{", "\t\t\t\t\t\t\txtype: \"fieldset\",", "\t\t\t\t\t\t\tlayout: {", "\t\t\t\t\t\t\t\ttype: \"vbox\",", "\t\t\t\t\t\t\t\talign: \"stretch\"", "\t\t\t\t\t\t\t},", "\t\t\t\t\t\t\tflex: 1,", "\t\t\t\t\t\t\ttitle: \"Loaded Data\",", "\t\t\t\t\t\t\titems: [", "\t\t\t\t\t\t\t    {", "                                    xtype: \"combobox\",", "                                    fieldLabel: \"Sheets\",", "                                    queryMode: \"local\",", "                        \t\t    displayField: \"name\",", "                        \t\t\tvalueField: \"value\",", "                        \t\t\teditable: false,", "                        \t\t\tautoSelect: true,", "                        \t\t\tstore: {},", "                        \t\t\tname: \"t_sheet\",", "                        \t\t\trequired: true,", "                        \t\t\tlisteners: {", "                        \t\t\t    change: function(tobj, nv, ov) {", "                        \t\t\t        this._update_sheet(nv);", "                        \t\t\t    },", "                        \t\t\t    scope: this", "                        \t\t\t}", "                                },", "                                ", "\t\t\t\t\t\t\t\t{", "\t\t\t\t\t\t\t\t    xtype: \"gridpanel\",", "\t\t\t\t\t\t\t\t    name: \"t_columns\",", "\t\t\t\t\t\t\t\t    title: \"Columns\",", "\t\t\t\t\t\t\t\t    flex: 1,", "\t\t\t\t\t\t\t\t    store: {},", "\t\t\t\t\t\t\t\t    plugins: [", "        \t\t\t\t\t\t\t\t{", "        \t\t\t\t\t\t\t\t\tptype: \"cellediting\",", "        \t\t\t\t\t\t\t\t\tclicksToEdit: 1", "        \t\t\t\t\t\t\t\t}", "        \t\t\t\t\t\t\t],", "\t\t\t\t\t\t\t\t    columns: [", "\t\t\t\t\t\t\t\t        {", "\t\t\t\t\t\t\t\t            text: \"Fieldname\",", "\t\t\t\t\t\t\t\t            dataIndex: \"fieldname\",", "\t\t\t\t\t\t\t\t            editor: {", "        \t\t\t\t\t\t\t\t\t\txtype: \"textfield\",", "        \t\t\t\t\t\t\t\t\t\tallowBlank: false", "        \t\t\t\t\t\t\t\t\t}", "\t\t\t\t\t\t\t\t        },", "\t\t\t\t\t\t\t\t        {", "\t\t\t\t\t\t\t\t            text: \"DataType\",", "\t\t\t\t\t\t\t\t            dataIndex: \"datatype\",", "\t\t\t\t\t\t\t\t            editor: {", "        \t\t\t\t\t\t\t\t\t\txtype: \"textfield\",", "        \t\t\t\t\t\t\t\t\t\tallowBlank: false", "        \t\t\t\t\t\t\t\t\t}", "\t\t\t\t\t\t\t\t        },", "\t\t\t\t\t\t\t\t        {", "\t\t\t\t\t\t\t\t            text: \"DataSize\",", "\t\t\t\t\t\t\t\t            dataIndex: \"datasize\",", "\t\t\t\t\t\t\t\t            editor: {", "        \t\t\t\t\t\t\t\t\t\txtype: \"textfield\",", "        \t\t\t\t\t\t\t\t\t\tallowBlank: false", "        \t\t\t\t\t\t\t\t\t}", "\t\t\t\t\t\t\t\t        },", "\t\t\t\t\t\t\t\t        {", "\t\t\t\t\t\t\t\t            text: \"Decimal\",", "\t\t\t\t\t\t\t\t            dataIndex: \"decimaldigits\",", "\t\t\t\t\t\t\t\t            editor: {", "        \t\t\t\t\t\t\t\t\t\txtype: \"textfield\",", "        \t\t\t\t\t\t\t\t\t\tallowBlank: false", "        \t\t\t\t\t\t\t\t\t}", "\t\t\t\t\t\t\t\t        }", "\t\t\t\t\t\t\t\t    ]", "\t\t\t\t\t\t\t\t},", "\t\t\t\t\t\t\t\t{", "                                    xtype: \"container\",", "                                    height: 5", "                                },", "\t\t\t\t\t\t\t\t{", "\t\t\t\t\t\t\t\t    xtype: \"gridpanel\",", "\t\t\t\t\t\t\t\t    name: \"t_data\",", "\t\t\t\t\t\t\t\t    title: \"Sample Data\",", "\t\t\t\t\t\t\t\t    flex: 1,", "\t\t\t\t\t\t\t\t    columns: []", "\t\t\t\t\t\t\t\t}", "\t\t\t\t\t\t\t]", "\t\t\t\t\t\t}", "\t\t\t\t\t]", "\t\t\t\t}", "\t\t\t],", "\t\t\tbuttons:[", "\t\t\t\t\"->\",", "\t\t\t\t{", "\t\t\t\t    text: IRm$.r1(\"B_CONFIRM\"),", "\t\t\t\t    handler: function() {", "\t\t\t\t        this.confirm_f();", "\t\t\t\t    },", "\t\t\t\t    scope: this", "\t\t\t\t},", "\t\t\t\t{", "\t\t\t\t\ttext: IRm$.r1('B_CLOSE'),", "\t\t\t\t\thandler:function() {", "\t\t\t\t\t\tthis.close();", "\t\t\t\t\t},", "\t\t\t\t\tscope: this", "\t\t\t\t}", "\t\t\t],", "\t\t\tlisteners: {", "\t\t\t\tafterrender: function(ui) {", "\t\t\t\t\tthis.init_f();", "\t\t\t\t}", "\t\t\t}", "\t\t});", "\t\t", "\t\tIG$._pdloader_sample_file.superclass.initComponent.apply(this, arguments);", "\t}", "});" ],
    "code_parts" : { },
    "params" : null,
    "java_class" : "com.amplix.scheduler.job.FileDataLoader",
    "intent" : null
  } ]
}