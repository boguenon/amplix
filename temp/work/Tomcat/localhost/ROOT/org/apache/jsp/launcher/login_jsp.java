/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.5.23
 * Generated at: 2019-06-19 03:25:23 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.launcher;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class login_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET POST or HEAD");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=utf-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write('\r');
      out.write('\n');

	request.setCharacterEncoding("utf-8");
	String _d = request.getParameter("_d");
	String ukey = "?_d=" + _d;
	String lang = request.getParameter("lang");
	lang = (lang == null) ? "en_US" : lang;
	
	String mts = request.getParameter("mts");
	mts = (mts == null) ? "" : mts;

      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html lang=\"en\">\r\n");
      out.write("<head>\r\n");
      out.write("<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\">\r\n");
      out.write("<meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\r\n");
      out.write("<meta http-equiv=\"Cache-Control\" content=\"no-cache, no-store, must-revalidate\">\r\n");
      out.write("<meta http-equiv=\"Pragma\" content=\"no-cache\">\r\n");
      out.write("<meta http-equiv=\"Expires\" content=\"0\">\r\n");
      out.write("<title>");
      out.print( com.amplix.launcher.App.CompanyName );
      out.write("</title>\r\n");
      out.write("\r\n");
      out.write("<style type=\"text/css\">\r\n");
      out.write("body {\r\n");
      out.write("\twidth: 100%;\r\n");
      out.write("\theight: 100%;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("body, div {\r\n");
      out.write("\tmargin: 0px;\r\n");
      out.write("\tpadding: 0px;\r\n");
      out.write("\toverflow: hidden;\r\n");
      out.write("}\r\n");
      out.write("</style>\r\n");
      out.write("<link rel=\"stylesheet\" href=\"./css/appsl.min.css?_dc=201906111958\" type=\"text/css\">\r\n");
 if (lang.equals("ko_KR")) {
      out.write("\r\n");
      out.write("<link rel=\"stylesheet\" type=\"text/css\" href=\"./fonts/hangul_nanum.css?_dc=201906111958\" />\r\n");
 } 
      out.write("\r\n");
      out.write("<script type=\"text/javascript\" src=\"./js/jquery-1.12.0.min.js\"></script>\r\n");
      out.write("<script type=\"text/javascript\" src=\"../config.js?_dc=201906111958\"></script>\r\n");
      out.write("<script type=\"text/javascript\" src=\"./js/igc8.min.js?_dc=201906111958\"></script>\r\n");
      out.write("\r\n");
      out.write("<script type=\"text/javascript\">\r\n");
      out.write("var useLocale = \"en_US\";\r\n");
      out.write("var loadingApp;\r\n");
      out.write("\r\n");
      out.write("function parseLocation() {\r\n");
      out.write("\tvar hash = window.location.hash.substring(1);\r\n");
      out.write("\t\r\n");
      out.write("\tif (hash == \"\" && window.location.search && window.location.search != \"\")\r\n");
      out.write("\t{\r\n");
      out.write("\t\thash = window.location.search.substring(1).split('&');\r\n");
      out.write("\t}\r\n");
      out.write("\telse\r\n");
      out.write("\t{\r\n");
      out.write("\t\thash = hash.split('&');\r\n");
      out.write("\t}\r\n");
      out.write("\t\r\n");
      out.write("\tfor (var i=0; i < hash.length; i++)\r\n");
      out.write("\t{\r\n");
      out.write("\t\tif (hash[i].length > 0 && hash[i].indexOf('=') > -1)\r\n");
      out.write("\t\t{\r\n");
      out.write("\t\t\tvar hname = hash[i].substring(0, hash[i].indexOf('=')),\r\n");
      out.write("\t\t\t\thvalue = hash[i].substring(hash[i].indexOf('=') + 1);\r\n");
      out.write("\t\t\t\r\n");
      out.write("\t\t\tswitch (hname)\r\n");
      out.write("\t\t\t{\r\n");
      out.write("\t\t\tcase 'lang':\r\n");
      out.write("\t\t\t\tuseLocale = hvalue;\r\n");
      out.write("\t\t\t\tbreak;\r\n");
      out.write("\t\t\tcase 'app':\r\n");
      out.write("\t\t\t\tloadingApp = hvalue;\r\n");
      out.write("\t\t\t\tbreak;\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t\t}\r\n");
      out.write("\t}\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("function initPage() {\r\n");
      out.write("\tvar uid = $.cookie(\"lui\") || \"\",\r\n");
      out.write("\t\tupd = \"\",\r\n");
      out.write("\t\tmts = \"");
      out.print(mts);
      out.write("\"\r\n");
      out.write("\t\r\n");
      out.write("\tIG$.createLoginPanel(uid, upd, false);\r\n");
      out.write("\r\n");
      out.write("\tvar bg = $(\"div.login-progress\").hide();\r\n");
      out.write("\r\n");
      out.write("\t$(\"#b_loc\").bind(\"change\", function(e) {\r\n");
      out.write("\t\tvar b_loc = $(\"#b_loc\"),\r\n");
      out.write("\t\t\tselvalue = $(\"option:selected\", b_loc).val(),\r\n");
      out.write("\t\t\tredirect = $(location).attr('href'),\r\n");
      out.write("\t\t\tp, hv, h = {},\r\n");
      out.write("\t\t\tk, v,\r\n");
      out.write("\t\t\ti, s = false;\r\n");
      out.write("\t\t\t\r\n");
      out.write("\t\tif (selvalue && selvalue != window.useLocale)\r\n");
      out.write("\t\t{\r\n");
      out.write("\t\t\t$.removeCookie(\"lang\");\r\n");
      out.write("        \t$.cookie(\"lang\", selvalue, {\r\n");
      out.write("        \t\tpath: \"/\"\r\n");
      out.write("        \t});\r\n");
      out.write("        \t\r\n");
      out.write("\t\t\tif (redirect.indexOf(\"?\") > -1)\r\n");
      out.write("\t\t\t{\r\n");
      out.write("\t\t\t\tp = redirect.substring(0, redirect.indexOf(\"?\"));\r\n");
      out.write("\t\t\t\thv = redirect.substring(redirect.indexOf(\"?\") + 1);\r\n");
      out.write("\t\t\t\th = hv.split(\"&\");\r\n");
      out.write("\t\t\t\t\r\n");
      out.write("\t\t\t\tfor (i=0; i < h.length; i++)\r\n");
      out.write("\t\t\t\t{\r\n");
      out.write("\t\t\t\t\tif (h[i].substring(0, 5) == \"lang=\")\r\n");
      out.write("\t\t\t\t\t{\r\n");
      out.write("\t\t\t\t\t\th[i] = h[i].substring(0, 5) + selvalue;\r\n");
      out.write("\t\t\t\t\t\ts = true;\r\n");
      out.write("\t\t\t\t\t\tbreak;\r\n");
      out.write("\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t}\r\n");
      out.write("\t\t\t\t\r\n");
      out.write("\t\t\t\thv = h.join(\"&\");\r\n");
      out.write("\t\t\t\t\r\n");
      out.write("\t\t\t\tredirect = p + \"?\" + hv;\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t\t\t\r\n");
      out.write("\t\t\tif (s == true)\r\n");
      out.write("\t\t\t{\r\n");
      out.write("\t\t\t\tbg.show();\r\n");
      out.write("\t\t\t\t\r\n");
      out.write("\t\t\t\tsetTimeout(function() {\r\n");
      out.write("\t\t\t\t\twindow.location.replace(redirect);\r\n");
      out.write("\t\t\t\t}, 100);\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t\t}\r\n");
      out.write("\t});\r\n");
      out.write("\t\t\r\n");
      out.write("\t$('#login_btn').bind('click', function() {\r\n");
      out.write("\t\tvar userid = $('#userid').val(),\r\n");
      out.write("\t\t\tpasswd = $('#userpassword').val();\r\n");
      out.write("\t\tIG$.doStartSession(userid, passwd, bg, mts);\r\n");
      out.write("\t\treturn false;\r\n");
      out.write("\t});\r\n");
      out.write("\t$('#userpassword').bind('keypress', function(e) {\r\n");
      out.write("\t\tif (e.keyCode == 13)\r\n");
      out.write("\t\t{\r\n");
      out.write("\t\t\tvar userid = $('#userid')[0].value,\r\n");
      out.write("\t\t\t\tpasswd = $('#userpassword')[0].value;\r\n");
      out.write("\t\t\t\r\n");
      out.write("\t\t\tIG$.doStartSession(userid, passwd, bg, mts);\r\n");
      out.write("\t\t\t\r\n");
      out.write("\t\t\treturn false;\r\n");
      out.write("\t\t}\r\n");
      out.write("\t\t\r\n");
      out.write("\t\treturn true;\r\n");
      out.write("\t});\r\n");
      out.write("\r\n");
      out.write("\tIG$.chkSess(null, function() {\r\n");
      out.write("\t\tIG$.chkSvrInfo(function() {\r\n");
      out.write("\t\t\t$('#loginWindow').show();\r\n");
      out.write("\t\t});\r\n");
      out.write("\t});\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("$(document).ready(function() {\r\n");
      out.write("\tparseLocation();\r\n");
      out.write("\tinitPage();\r\n");
      out.write("});\r\n");
      out.write("</script>\r\n");
      out.write("</head>\r\n");
      out.write("<body scroll=\"no\">\r\n");
      out.write("<script>\r\n");
      out.write("  (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){\r\n");
      out.write("  (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),\r\n");
      out.write("  m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)\r\n");
      out.write("  })(window,document,'script','https://www.google-analytics.com/analytics.js','ga');\r\n");
      out.write("\r\n");
      out.write("  ga('create', 'UA-110159277-1', 'auto');\r\n");
      out.write("  ga('send', 'pageview');\r\n");
      out.write("</script>\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
