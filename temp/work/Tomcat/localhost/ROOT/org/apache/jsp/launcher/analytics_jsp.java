/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.5.23
 * Generated at: 2019-06-19 03:25:43 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.launcher;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class analytics_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET POST or HEAD");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=utf-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write('\r');
      out.write('\n');

    request.setCharacterEncoding("utf-8");
    String _d = request.getParameter("_d");
    String ukey = "?_d=" + _d;
    String lang = request.getParameter("lang");
    lang = (lang == null) ? "en_US" : lang;
	String mts = request.getParameter("mts");
	mts = (mts == null) ? "" : mts;
	String tmp = request.getParameter("tmp");
    tmp = (tmp == null) ? "" : tmp;
    
    String version = com.amplix.rpc.igcServer.version;

      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html lang=\"en\">\r\n");
      out.write("<head>\r\n");
      out.write("<title>");
      out.print( com.amplix.launcher.App.CompanyName );
      out.write("</title>\r\n");
      out.write("<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\" />\r\n");
      out.write("<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\r\n");
      out.write("<meta http-equiv=\"Cache-Control\" content=\"no-cache, no-store, must-revalidate\">\r\n");
      out.write("<meta http-equiv=\"Pragma\" content=\"no-cache\">\r\n");
      out.write("<meta http-equiv=\"Expires\" content=\"0\">\r\n");
      out.write("<link rel=\"stylesheet\" type=\"text/css\" href=\"./css/apps.min.css?_dc=201906111958\" />\r\n");
 if (lang.equals("ko_KR")) {
      out.write("\r\n");
      out.write("<link rel=\"stylesheet\" type=\"text/css\" href=\"./fonts/hangul_nanum.css?_dc=201906111958\" />\r\n");
 } 
      out.write("\r\n");
      out.write("\r\n");
      out.write("<script type=\"text/javascript\" src=\"./js/jquery-1.12.0.min.js\"></script>    \r\n");
      out.write("<script type=\"text/javascript\" src=\"../config.js?_dc=201906111958\"></script>\r\n");
      out.write("<script type=\"text/javascript\" src=\"../bootconfig.js?_dc=201906111958\"></script>\r\n");
      out.write("<script type=\"text/javascript\" src=\"./js/igca.min.js?_dc=201906111958\"></script>\r\n");
      out.write("\r\n");
      out.write("<script type=\"text/javascript\">\r\n");
      out.write("var useLocale = \"");
      out.print(lang);
      out.write("\";\r\n");
      out.write("var m$mts = \"");
      out.print(mts);
      out.write("\";\r\n");
      out.write("var m$_d = \"\";\r\n");
      out.write("\r\n");
      out.write("// default theme\r\n");
      out.write("// ig$/*appoption*/.theme_id = \"DarkBrown\";\r\n");
      out.write("\r\n");
      out.write("function getLocale()\r\n");
      out.write("{\r\n");
      out.write("\tvar hash = window.location.hash.substring(1).split('&'),\r\n");
      out.write("\t\ti, k, v, m;\r\n");
      out.write("\t\r\n");
      out.write("\tfor (i=0; i < hash.length; i++)\r\n");
      out.write("\t{\r\n");
      out.write("\t\tm = hash[i].indexOf(\"=\");\r\n");
      out.write("\t\tif (m > 0)\r\n");
      out.write("\t\t{\r\n");
      out.write("\t\t\tk = hash[i].substring(0, m);\r\n");
      out.write("\t\t\tv = hash[i].substring(m+1);\r\n");
      out.write("\t\t\t\r\n");
      out.write("\t\t\tif (k == \"lang\" && v)\r\n");
      out.write("\t\t\t{\r\n");
      out.write("\t\t\t\tuseLocale = v;\r\n");
      out.write("\t\t\t\tbreak;\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t\t}\r\n");
      out.write("\t}\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("getLocale();\r\n");
      out.write("</script>\r\n");
      out.write("\r\n");
      out.write("<script type=\"text/javascript\">\r\n");
      out.write("window.IG$/*mainapp*/ = window.IG$/*mainapp*/ || {};\r\n");
      out.write("window.IG$/*mainapp*/.__ep_ = \"");
      out.print(tmp);
      out.write("\";\r\n");
      out.write("</script>\r\n");
      out.write("\r\n");
      out.write("<script type=\"text/javascript\">\r\n");
      out.write("ig$.appInfo.apprelease = \"");
      out.print( version);
      out.write("\";\r\n");
      out.write("ig$.bootconfig.cache = ig$.appInfo.apprelease + \"_\" + ig$.appInfo.date.replace(/[{}]/g, \"\");\r\n");
      out.write("\r\n");
      out.write("var bc = ig$.bootconfig.boot,\r\n");
      out.write("    scripts,\r\n");
      out.write("    i, j,\r\n");
      out.write("    modules = [\"framework\", \"vis\", \"app\", \"custom\"],\r\n");
      out.write("    s, cache = ig$.bootconfig.cache || new Date().getTime(),\r\n");
      out.write("    __microloader = function() {\r\n");
      out.write("        while (mod = modules.shift())\r\n");
      out.write("        {\r\n");
      out.write("            var sc = bc[mod];\r\n");
      out.write("            \r\n");
      out.write("            if (sc && sc.length)\r\n");
      out.write("            {\r\n");
      out.write("                IG$.getScriptCache(\r\n");
      out.write("                    sc, \r\n");
      out.write("                    new IG$.callBackObj(this, function() {\r\n");
      out.write("                        __microloader();\r\n");
      out.write("                    })\r\n");
      out.write("                );\r\n");
      out.write("                break;\r\n");
      out.write("            }\r\n");
      out.write("        }\r\n");
      out.write("    };\r\n");
      out.write("\r\n");
      out.write("__microloader();\r\n");
      out.write("</script>\r\n");
      out.write("</head>\r\n");
      out.write("<body scroll=\"no\">\r\n");
      out.write("\t<div id=\"loading-mask\" style=\"\"></div>\r\n");
      out.write("\t<div id=\"loading\">\r\n");
      out.write("\t\t<div class=\"cmsg\">\r\n");
      out.write("\t\t\t<div class=\"msg\">Loading ");
      out.print( com.amplix.launcher.App.CompanyName );
      out.write("...</div>\r\n");
      out.write("\t\t\t<div class=\"lpb\">\r\n");
      out.write("\t\t\t\t<div id=\"lpt\" style=\"width: 10%;\"></div>\r\n");
      out.write("\t\t\t</div>\r\n");
      out.write("\t\t</div>\r\n");
      out.write("\t</div>\r\n");
      out.write("\r\n");
      out.write("\t<div id=\"main\"></div>\r\n");
      out.write("<script>\r\n");
      out.write("  (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){\r\n");
      out.write("  (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),\r\n");
      out.write("  m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)\r\n");
      out.write("  })(window,document,'script','https://www.google-analytics.com/analytics.js','ga');\r\n");
      out.write("\r\n");
      out.write("  ga('create', 'UA-110159277-1', 'auto');\r\n");
      out.write("  ga('send', 'pageview');\r\n");
      out.write("</script>\r\n");
      out.write("</body>\r\n");
      out.write("</html>\r\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
