{
  "meta_type" : "schedule_config",
  "objinfo" : { },
  "type" : "Unknown",
  "writable" : false,
  "manage" : false,
  "is_sub" : false,
  "attributes" : { },
  "programs" : [ {
    "name" : "CClearResources",
    "description" : null,
    "mod_type" : "scheduler_quartz",
    "java_source" : [ "String tempfolder = p_daemon.APP_HOME + \"/temp\";", "          ", "File dir = new File(tempfolder);", "", "long tsize = 0L;", "int n = 0;", "", "SimpleDateFormat sdf = new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\");", "Date cdate = new Date();", "long ldate = cdate.getTime();", "", "for (File f : dir.listFiles())", "{", "  if (f.isFile() && f.canRead() && f.canWrite())", "  {", "    String fname = f.getAbsolutePath();", "    long fsize = f.getTotalSpace();", "    String date = sdf.format(f.lastModified());", "    ", "    if (ldate - f.lastModified() > 60 * 6 * 1000L)", "    {", "      try", "      {", "        f.delete();", "        logger.debug(\"oooooo delete \" + fname + \" (\" + fsize + \"), \" + date);", "        tsize += fsize;", "        n++;", "      }", "      catch (Exception e)", "      {", "        logger.debug(\"****** delete failed : \" + fname + \" : \" + e.getMessage());", "      }", "    }", "    else", "    {", "      logger.debug(\"xxxxxx delete failed : \" + fname + \" : last modified \" + date);", "    }", "  }", "}", "", "logger.debug(\"##### total \" + n + \" files deleted (\" + tsize + \" bytes)\");" ],
    "java_import" : [ ],
    "java_extra" : [ ],
    "ui_layout" : null,
    "ui_script" : null,
    "code_parts" : { },
    "params" : null,
    "intent" : null,
    "java_class" : "com.amplix.scheduler.job.CClearResources"
  }, {
    "name" : "test",
    "description" : null,
    "mod_type" : "external_dataloader",
    "java_source" : [ "logger.debug(\"this is test\");", "", "String dbname = \"Northwind Sample\";", "", "this.executeProcess(con, dbname);", "" ],
    "java_import" : [ "import com.amplix.service.system.HttpBridge;", "import java.io.BufferedReader;", "import java.io.StringReader;", "import com.amplix.utility.DTokenizer;", "import java.util.ArrayList;", "import java.util.List;", "import java.util.Date;", "import java.text.SimpleDateFormat;", "import java.util.Calendar;" ],
    "java_extra" : [ "private final String tbname = \"tb_corana19\";", "", "private void executeProcess(Connection con_meta, String dbname)", "\tthrows Exception", "{", "\tDBConnectionPool dbpool = null;", "\tdbpool = this.getConnectionPool(con_meta, dbname);", "\tConnection con = null;", "\t", "\ttry", "\t{", "\t\tcon = p_daemon.connMgr.getConnection(dbpool, null);", "", "\t\tif (con == null)", "\t\t{", "\t\t\tlogger.error(\"error on database connection\");", "\t\t}", "\t\tcreateOrTruncTable(con, tbname);", "\t\t", "\t\tCalendar cal = Calendar.getInstance();", "\t\tcal.set(2020, 0, 20);", "\t\t", "\t\tCalendar cdate = Calendar.getInstance();", "\t\t", "\t\tSimpleDateFormat dformat = new SimpleDateFormat(\"MM-dd-yyyy\");", "\t\t", "\t\twhile (true)", "\t\t{", "\t\t\tString fname = dformat.format(cal.getTime()) + \".csv\";", "\t\t\tprocessLoadFile(con_meta, con, fname, dbname);", "\t\t\t", "\t\t\tif (cal.getTime().getTime() > cdate.getTime().getTime())", "\t\t\t\tbreak;", "\t\t\t\t", "\t\t\tcal.add(Calendar.DATE, 1);", "\t\t}", "\t}", "\tcatch (Exception ex)", "\t{", "\t\tp_daemon.connMgr.rollbackConnection(null, con);", "\t\tthrow new Exception(\"error while loading data\", ex);", "\t}", "\tfinally", "\t{", "\t\tp_daemon.connMgr.freeConnection(dbpool, con);", "\t}", "}", "", "private void processLoadFile(Connection con_meta, Connection con, String fname, String dbname)", "\tthrows Exception", "{", "\tHttpBridge bridge = new HttpBridge(\"https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_daily_reports/\",  -1, -1, -1);", "\tString tvalue = bridge.sendGet(fname);", "", "\tPreparedStatement pstmt = null;", "\t", "\ttry", "\t{", "\t\tString sql = null;", "\t\t", "\t\tsql = \"INSERT INTO \" + tbname + \"(province_state, country_region, last_update, confirmed, deaths, recovered, latitude, longitude) VALUES (?, ?, ?, ?, ?, ?, ?, ?)\";", "\t\tpstmt = con.prepareStatement(sql);", "\t\t", "\t\tBufferedReader reader = new BufferedReader(new StringReader(tvalue));", "\t\tString line = null;", "\t\tint l = 0;", "\t\t", "\t\tSimpleDateFormat dformat = new SimpleDateFormat(\"MM/dd/yyyy HH:mm\");", "\t\tSimpleDateFormat dformat2 = new SimpleDateFormat(\"yyyy-MM-dd'T'HH:mm:ss\");", "\t\tSimpleDateFormat dformat3 = new SimpleDateFormat(\"M/dd/yy HH:mm\");", "\t\twhile ((line = reader.readLine()) != null)", "\t\t{", "\t\t\tlogger.debug(line);", "\t\t\tif (line.trim().length() == 0)", "\t\t\t\tcontinue;", "\t\t\t\t", "\t\t\tif (l == 0)", "\t\t\t{", "\t\t\t\tl++;", "\t\t\t\tcontinue;", "\t\t\t}", "\t\t\t\t", "\t\t\tString[] mrow = DTokenizer.parseCSV(line, ',');", "\t\t\t", "\t\t\tfor (int i=0; i < 8; i++)", "\t\t\t{", "\t\t\t\tString t = mrow.length > i ? mrow[i] : null;", "\t\t\t\tif (i == 2)", "\t\t\t\t{", "\t\t\t\t\t// 1/22/2020 17:00", "\t\t\t\t\tDate dt = null;", "\t\t\t\t\tif (t.length() == \"yyyy-MM-ddTHH:mm:ss\".length())", "\t\t\t\t\t{", "\t\t\t\t\t\tdt = dformat2.parse(t);", "\t\t\t\t\t}", "\t\t\t\t\telse if (t.length() < 15)", "\t\t\t\t\t{", "\t\t\t\t\t\tdt = dformat3.parse(t);", "\t\t\t\t\t}", "\t\t\t\t\telse", "\t\t\t\t\t{", "\t\t\t\t\t\tdt = dformat.parse(t);", "\t\t\t\t\t}", "\t\t\t\t\tpstmt.setDate(i + 1, new java.sql.Date(dt.getTime()));", "\t\t\t\t}", "\t\t\t\telse if (i > 2 && i < 6)", "\t\t\t\t{", "\t\t\t\t\tif (t != null && t.length() > 0)", "\t\t\t\t\t{", "\t\t\t\t\t\tpstmt.setInt(i + 1, Integer.parseInt(t));", "\t\t\t\t\t}", "\t\t\t\t\telse", "\t\t\t\t\t{", "\t\t\t\t\t\tpstmt.setInt(i + 1, 0);", "\t\t\t\t\t}", "\t\t\t\t}", "\t\t\t\telse if (i > 5)", "\t\t\t\t{", "\t\t\t\t\tpstmt.setString(i + 1, t);", "\t\t\t\t}", "\t\t\t\telse", "\t\t\t\t{", "\t\t\t\t\tpstmt.setString(i + 1, t);", "\t\t\t\t}", "\t\t\t}", "\t\t\t", "\t\t\tpstmt.addBatch();", "\t\t\t", "\t\t\tl++;", "\t\t}", "\t\t", "\t\tpstmt.executeBatch();", "\t\t", "\t\tpstmt.close();", "\t\tpstmt = null;", "\t\t", "\t\treader.close();", "\t\treader = null;", "\t}", "\tcatch (Exception ex)", "\t{", "\t\tif (pstmt != null)", "\t\t\tpstmt.close();", "\t\tpstmt = null;", "\t\tthrow new Exception(\"error while loading data\", ex);", "\t}", "\tfinally", "\t{", "\t\tif (pstmt != null)", "\t\t\tpstmt.close();", "\t\tpstmt = null;", "\t}", "}", "", "private void createOrTruncTable(Connection con, String tbname)", "\tthrows Exception", "{", "\tPreparedStatement pstmt = null;", "\t", "\tString sql = null;", "\t\t", "\tsql = \"CREATE TABLE \" + tbname + \" (\"", "\t\t+ \" province_state varchar(100),\"", "\t\t+ \" country_region varchar(50),\"", "\t\t+ \" last_update date,\"", "\t\t+ \" confirmed numeric(9),\"", "\t\t+ \" deaths numeric(9),\"", "\t\t+ \" recovered numeric(9),\"", "\t\t+ \" latitude varchar(32),\"", "\t\t+ \" longitude varchar(32)\"", "\t\t+ \")\";", "\t\t", "\ttry", "\t{", "\t\tpstmt = con.prepareStatement(sql);", "\t\tpstmt.execute();", "\t\tpstmt.close();", "\t\tpstmt = null;", "\t}", "\tcatch (Exception e)", "\t{", "\t\tlogger.error(\"error on create table\");", "\t}", "\t", "\tsql = \"TRUNCATE TABLE \" + tbname;", "\tpstmt = con.prepareStatement(sql);", "\tpstmt.execute();", "\t", "\tif (pstmt != null)", "\t\tpstmt.close();", "\tpstmt = null;", "}" ],
    "ui_layout" : null,
    "ui_script" : null,
    "code_parts" : { },
    "params" : null,
    "intent" : null,
    "java_class" : "com.amplix.scheduler.job.tes"
  }, {
    "name" : "Corona19DataLoader",
    "description" : null,
    "mod_type" : "external_dataloader",
    "java_source" : [ "logger.debug(\"this is test\");", "", "String dbname = \"Northwind Sample\";", "", "this.executeProcess(con, dbname);", "" ],
    "java_import" : [ "import com.amplix.service.system.HttpBridge;", "import java.io.BufferedReader;", "import java.io.StringReader;", "import com.amplix.utility.DTokenizer;", "import java.util.ArrayList;", "import java.util.List;", "import java.util.Date;", "import java.text.SimpleDateFormat;", "import java.util.Calendar;" ],
    "java_extra" : [ "private final String tbname = \"tb_corana19\";", "", "private void executeProcess(Connection con_meta, String dbname)", "\tthrows Exception", "{", "\tDBConnectionPool dbpool = null;", "\tdbpool = this.getConnectionPool(con_meta, dbname);", "\tConnection con = null;", "\t", "\ttry", "\t{", "\t\tcon = p_daemon.connMgr.getConnection(dbpool, null);", "", "\t\tif (con == null)", "\t\t{", "\t\t\tlogger.error(\"error on database connection\");", "\t\t}", "\t\tcreateOrTruncTable(con, tbname);", "\t\t", "\t\tCalendar cal = Calendar.getInstance();", "\t\tcal.set(2020, 0, 20);", "\t\t", "\t\tCalendar cdate = Calendar.getInstance();", "\t\t", "\t\tSimpleDateFormat dformat = new SimpleDateFormat(\"MM-dd-yyyy\");", "\t\t", "\t\twhile (true)", "\t\t{", "\t\t\tString fname = dformat.format(cal.getTime()) + \".csv\";", "\t\t\tprocessLoadFile(con_meta, con, fname, dbname);", "\t\t\t", "\t\t\tif (cal.getTime().getTime() > cdate.getTime().getTime())", "\t\t\t\tbreak;", "\t\t\t\t", "\t\t\tcal.add(Calendar.DATE, 1);", "\t\t}", "\t}", "\tcatch (Exception ex)", "\t{", "\t\tp_daemon.connMgr.rollbackConnection(null, con);", "\t\tthrow new Exception(\"error while loading data\", ex);", "\t}", "\tfinally", "\t{", "\t\tp_daemon.connMgr.freeConnection(dbpool, con);", "\t}", "}", "", "private void processLoadFile(Connection con_meta, Connection con, String fname, String dbname)", "\tthrows Exception", "{", "\tHttpBridge bridge = new HttpBridge(\"https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_daily_reports/\",  -1, -1, -1);", "\tString tvalue = bridge.sendGet(fname);", "", "\tPreparedStatement pstmt = null;", "\t", "\ttry", "\t{", "\t\tString sql = null;", "\t\t", "\t\tsql = \"INSERT INTO \" + tbname + \"(province_state, country_region, last_update, confirmed, deaths, recovered, latitude, longitude) VALUES (?, ?, ?, ?, ?, ?, ?, ?)\";", "\t\tpstmt = con.prepareStatement(sql);", "\t\t", "\t\tBufferedReader reader = new BufferedReader(new StringReader(tvalue));", "\t\tString line = null;", "\t\tint l = 0;", "\t\t", "\t\tSimpleDateFormat dformat = new SimpleDateFormat(\"MM/dd/yyyy HH:mm\");", "\t\tSimpleDateFormat dformat2 = new SimpleDateFormat(\"yyyy-MM-dd'T'HH:mm:ss\");", "\t\tSimpleDateFormat dformat3 = new SimpleDateFormat(\"M/dd/yy HH:mm\");", "\t\twhile ((line = reader.readLine()) != null)", "\t\t{", "\t\t\tlogger.debug(line);", "\t\t\tif (line.trim().length() == 0)", "\t\t\t\tcontinue;", "\t\t\t\t", "\t\t\tif (l == 0)", "\t\t\t{", "\t\t\t\tl++;", "\t\t\t\tcontinue;", "\t\t\t}", "\t\t\t\t", "\t\t\tString[] mrow = DTokenizer.parseCSV(line, ',');", "\t\t\t", "\t\t\tfor (int i=0; i < 8; i++)", "\t\t\t{", "\t\t\t\tString t = mrow.length > i ? mrow[i] : null;", "\t\t\t\tif (i == 2)", "\t\t\t\t{", "\t\t\t\t\t// 1/22/2020 17:00", "\t\t\t\t\tDate dt = null;", "\t\t\t\t\tif (t.length() == \"yyyy-MM-ddTHH:mm:ss\".length())", "\t\t\t\t\t{", "\t\t\t\t\t\tdt = dformat2.parse(t);", "\t\t\t\t\t}", "\t\t\t\t\telse if (t.length() < 15)", "\t\t\t\t\t{", "\t\t\t\t\t\tdt = dformat3.parse(t);", "\t\t\t\t\t}", "\t\t\t\t\telse", "\t\t\t\t\t{", "\t\t\t\t\t\tdt = dformat.parse(t);", "\t\t\t\t\t}", "\t\t\t\t\tpstmt.setDate(i + 1, new java.sql.Date(dt.getTime()));", "\t\t\t\t}", "\t\t\t\telse if (i > 2 && i < 6)", "\t\t\t\t{", "\t\t\t\t\tif (t != null && t.length() > 0)", "\t\t\t\t\t{", "\t\t\t\t\t\tpstmt.setInt(i + 1, Integer.parseInt(t));", "\t\t\t\t\t}", "\t\t\t\t\telse", "\t\t\t\t\t{", "\t\t\t\t\t\tpstmt.setInt(i + 1, 0);", "\t\t\t\t\t}", "\t\t\t\t}", "\t\t\t\telse if (i > 5)", "\t\t\t\t{", "\t\t\t\t\tpstmt.setString(i + 1, t);", "\t\t\t\t}", "\t\t\t\telse", "\t\t\t\t{", "\t\t\t\t\tpstmt.setString(i + 1, t);", "\t\t\t\t}", "\t\t\t}", "\t\t\t", "\t\t\tpstmt.addBatch();", "\t\t\t", "\t\t\tl++;", "\t\t}", "\t\t", "\t\tpstmt.executeBatch();", "\t\t", "\t\tpstmt.close();", "\t\tpstmt = null;", "\t\t", "\t\treader.close();", "\t\treader = null;", "\t}", "\tcatch (Exception ex)", "\t{", "\t\tif (pstmt != null)", "\t\t\tpstmt.close();", "\t\tpstmt = null;", "\t\t// throw new Exception(\"error while loading data\" + fname, ex);", "\t}", "\tfinally", "\t{", "\t\tif (pstmt != null)", "\t\t\tpstmt.close();", "\t\tpstmt = null;", "\t}", "}", "", "private void createOrTruncTable(Connection con, String tbname)", "\tthrows Exception", "{", "\tPreparedStatement pstmt = null;", "\t", "\tString sql = null;", "\t\t", "\tsql = \"CREATE TABLE \" + tbname + \" (\"", "\t\t+ \" province_state varchar(100),\"", "\t\t+ \" country_region varchar(50),\"", "\t\t+ \" last_update date,\"", "\t\t+ \" confirmed numeric(9),\"", "\t\t+ \" deaths numeric(9),\"", "\t\t+ \" recovered numeric(9),\"", "\t\t+ \" latitude varchar(32),\"", "\t\t+ \" longitude varchar(32)\"", "\t\t+ \")\";", "\t\t", "\ttry", "\t{", "\t\tpstmt = con.prepareStatement(sql);", "\t\tpstmt.execute();", "\t\tpstmt.close();", "\t\tpstmt = null;", "\t}", "\tcatch (Exception e)", "\t{", "\t\tlogger.error(\"error on create table\");", "\t}", "\t", "\tsql = \"TRUNCATE TABLE \" + tbname;", "\tpstmt = con.prepareStatement(sql);", "\tpstmt.execute();", "\t", "\tif (pstmt != null)", "\t\tpstmt.close();", "\tpstmt = null;", "}" ],
    "ui_layout" : null,
    "ui_script" : null,
    "code_parts" : { },
    "params" : null,
    "intent" : null,
    "java_class" : "com.amplix.scheduler.job.Corona19DataLoaderr"
  }, {
    "name" : "test_sso1",
    "description" : null,
    "mod_type" : "single_sign_on",
    "java_source" : [ ],
    "java_import" : [ ],
    "java_extra" : [ ],
    "ui_layout" : [ ],
    "ui_script" : [ ],
    "code_parts" : {
      "code_before_login" : [ "if (userid != null && userid.startsWith(\"sso_sim_b6118e61573e4aaa_key_map:\") == true)\r", "{\r", "\tthis.setSecProp(iprop);\r", "\t\r", "\t//Object _osess = session.getAttribute(\"__sso_info\"); //-- session \r", "\t \r", "\tObject _osess = session.getAttribute(\"__sso_info\");\r", "\r", "\tif (_osess != null)\r", "\t{\r", "\t\tString t = _osess.toString();\r", "\t\tlogger.info(t);\r", "\t\tString muserid = t.substring(t.indexOf(\":\") + 1);\r", "\r", "\t\tlogger.info(\">> login with ID : \" + muserid);\r", "\t\t\r", "\t\tuid = getRegisteredUserUUID(mts, muserid);\r", "\t}\r", "}" ]
    },
    "params" : null,
    "intent" : null,
    "java_class" : "com.amplix.sso.custom.test_sso"
  }, {
    "name" : "test_singleSignOn",
    "description" : null,
    "mod_type" : "single_sign_on",
    "java_source" : [ ],
    "java_import" : [ ],
    "java_extra" : [ ],
    "ui_layout" : [ ],
    "ui_script" : [ ],
    "code_parts" : {
      "code_before_login" : [ "if (userid != null && userid.startsWith(\"sso_sim_b6118e61573e4aaa_key_map:\") == true)\r", "{\r", "\tthis.setSecProp(iprop);\r", "\t\r", "\tString mts = \"0122483f-0155fb46\";\r", "\t//Object _osess = session.getAttribute(\"__sso_info\"); //-- session \r", "\t \r", "\tObject _osess = session.getAttribute(\"__sso_info\");\r", "\r", "\tif (_osess != null)\r", "\t{\r", "\t\tString t = _osess.toString();\r", "\t\tlogger.info(t);\r", "\t\tString muserid = t.substring(t.indexOf(\":\") + 1);\r", "\r", "\t\tlogger.info(\">> login with ID : \" + muserid);\r", "\t\t\r", "\t\tuid = getRegisteredUserUUID(mts, muserid);\r", "\t}\r", "}" ]
    },
    "params" : null,
    "intent" : null,
    "java_class" : "com.amplix.sso.custom.test_singleSignO"
  } ]
}